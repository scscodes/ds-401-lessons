{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNhs42+Ta28H1AJksdYxgSX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","from sklearn.datasets import make_blobs\n","from matplotlib import pyplot\n","from pandas import DataFrame\n","from mlxtend.plotting import plot_decision_regions\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.datasets import load_breast_cancer\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import roc_curve\n","from sklearn.metrics import roc_auc_score\n","import pandas as pd\n","import numpy as np\n","import math\n","from sklearn.preprocessing import StandardScaler\n","from scipy import stats\n","\n","import warnings\n","warnings.filterwarnings('ignore')\n"],"metadata":{"id":"-TLLWmCnLU_N","executionInfo":{"status":"ok","timestamp":1723579715704,"user_tz":240,"elapsed":153,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["! pip install mlxtend==0.21.0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"NzPMITHuSQON","executionInfo":{"status":"ok","timestamp":1723578622385,"user_tz":240,"elapsed":2997,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}},"outputId":"e43a3212-7055-4e38-9fee-44a70c860a81"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: mlxtend==0.21.0 in /usr/local/lib/python3.10/dist-packages (0.21.0)\n","Requirement already satisfied: scipy>=1.2.1 in /usr/local/lib/python3.10/dist-packages (from mlxtend==0.21.0) (1.13.1)\n","Requirement already satisfied: numpy>=1.16.2 in /usr/local/lib/python3.10/dist-packages (from mlxtend==0.21.0) (1.26.4)\n","Requirement already satisfied: pandas>=0.24.2 in /usr/local/lib/python3.10/dist-packages (from mlxtend==0.21.0) (2.1.4)\n","Requirement already satisfied: scikit-learn>=1.0.2 in /usr/local/lib/python3.10/dist-packages (from mlxtend==0.21.0) (1.3.2)\n","Requirement already satisfied: matplotlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from mlxtend==0.21.0) (3.5.3)\n","Requirement already satisfied: joblib>=0.13.2 in /usr/local/lib/python3.10/dist-packages (from mlxtend==0.21.0) (1.4.2)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from mlxtend==0.21.0) (71.0.4)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.0->mlxtend==0.21.0) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.0->mlxtend==0.21.0) (4.53.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.0->mlxtend==0.21.0) (1.4.5)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.0->mlxtend==0.21.0) (24.1)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.0->mlxtend==0.21.0) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.2.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.0->mlxtend==0.21.0) (3.1.2)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.0->mlxtend==0.21.0) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24.2->mlxtend==0.21.0) (2024.1)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24.2->mlxtend==0.21.0) (2024.1)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.2->mlxtend==0.21.0) (3.5.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib>=3.0.0->mlxtend==0.21.0) (1.16.0)\n"]}]},{"cell_type":"code","source":["! pip install matplotlib==3.5.3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"gA915BYJSRID","executionInfo":{"status":"ok","timestamp":1723578632908,"user_tz":240,"elapsed":8317,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}},"outputId":"9ef21382-445a-4db9-e2e9-5218bbed154b"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: matplotlib==3.5.3 in /usr/local/lib/python3.10/dist-packages (3.5.3)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.5.3) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.5.3) (4.53.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.5.3) (1.4.5)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.5.3) (1.26.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.5.3) (24.1)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.5.3) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.2.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.5.3) (3.1.2)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.5.3) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib==3.5.3) (1.16.0)\n"]}]},{"cell_type":"code","execution_count":7,"metadata":{"id":"Wac52T5wLNUo","executionInfo":{"status":"ok","timestamp":1723578864060,"user_tz":240,"elapsed":165,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"outputs":[],"source":["# 2 - load and prepare dataset\n","data_file = '/content/parkinsons.csv'\n","# 2-1 create dataframe\n","df_data = pd.read_csv(data_file)"]},{"cell_type":"code","source":["df_data.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"eAPWcswELYje","executionInfo":{"status":"ok","timestamp":1723578876721,"user_tz":240,"elapsed":174,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}},"outputId":"6c57b154-ab00-48f2-bd78-47e596682277"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 195 entries, 0 to 194\n","Data columns (total 24 columns):\n"," #   Column            Non-Null Count  Dtype  \n","---  ------            --------------  -----  \n"," 0   name              195 non-null    object \n"," 1   MDVP:Fo(Hz)       195 non-null    float64\n"," 2   MDVP:Fhi(Hz)      195 non-null    float64\n"," 3   MDVP:Flo(Hz)      195 non-null    float64\n"," 4   MDVP:Jitter(%)    195 non-null    float64\n"," 5   MDVP:Jitter(Abs)  195 non-null    float64\n"," 6   MDVP:RAP          195 non-null    float64\n"," 7   MDVP:PPQ          195 non-null    float64\n"," 8   Jitter:DDP        195 non-null    float64\n"," 9   MDVP:Shimmer      195 non-null    float64\n"," 10  MDVP:Shimmer(dB)  195 non-null    float64\n"," 11  Shimmer:APQ3      195 non-null    float64\n"," 12  Shimmer:APQ5      195 non-null    float64\n"," 13  MDVP:APQ          195 non-null    float64\n"," 14  Shimmer:DDA       195 non-null    float64\n"," 15  NHR               195 non-null    float64\n"," 16  HNR               195 non-null    float64\n"," 17  status            195 non-null    int64  \n"," 18  RPDE              195 non-null    float64\n"," 19  DFA               195 non-null    float64\n"," 20  spread1           195 non-null    float64\n"," 21  spread2           195 non-null    float64\n"," 22  D2                195 non-null    float64\n"," 23  PPE               195 non-null    float64\n","dtypes: float64(22), int64(1), object(1)\n","memory usage: 36.7+ KB\n"]}]},{"cell_type":"code","source":["# 2-2 drop name col\n","df_data.drop(['name'], axis=1, inplace=True)"],"metadata":{"id":"zKg1Hi4bS_Xo","executionInfo":{"status":"ok","timestamp":1723578929489,"user_tz":240,"elapsed":175,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["# 2-3 create df, x, with all cols except status\n","x = df_data.drop(['status'], axis=1)\n","\n","# 2-4 create df, y, with status\n","y = df_data['status']"],"metadata":{"id":"qxZBZRLyT1AD","executionInfo":{"status":"ok","timestamp":1723578982432,"user_tz":240,"elapsed":152,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# 3 spit data into training and test sets\n","x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=7)"],"metadata":{"id":"5uoqm4hWUB7R","executionInfo":{"status":"ok","timestamp":1723579002103,"user_tz":240,"elapsed":186,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["# 4 create model\n","# 4-1 initialize logistic regression with lbfgs solver and penalty=None\n","model = LogisticRegression(solver='lbfgs', penalty=None, max_iter=10000, random_state=2)\n","\n","# 4-2 fit classifier to data\n","model.fit(x_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"2kVLgsvFUGuR","executionInfo":{"status":"ok","timestamp":1723579355752,"user_tz":240,"elapsed":522,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}},"outputId":"9f779429-35a4-4932-a6e3-ed8ae4b2a963"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(max_iter=10000, penalty=None, random_state=2)"],"text/html":["<style>#sk-container-id-3 {color: black;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=10000, penalty=None, random_state=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=10000, penalty=None, random_state=2)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["# 5 calculate accuracy\n","print(model.score(x_test, y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"61uJOv_TUXxW","executionInfo":{"status":"ok","timestamp":1723579356649,"user_tz":240,"elapsed":149,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}},"outputId":"265b1f52-98e7-47ed-8995-b604ad6b3849"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["0.8717948717948718\n"]}]},{"cell_type":"code","source":["# 6 L2 regularization\n","regularized_model = LogisticRegression(solver='lbfgs', penalty='l2', max_iter=10000, random_state=2)\n","regularized_model.fit(x_train, y_train)\n","print(regularized_model.score(x_test, y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"onU_XL2lUdOh","executionInfo":{"status":"ok","timestamp":1723579359841,"user_tz":240,"elapsed":173,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}},"outputId":"b80c8028-7cc5-4f49-ca61-12b5e3dbc7c4"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["0.8974358974358975\n"]}]},{"cell_type":"code","source":["# 7 set 'c' from 0.05 to 1.5, accuracy of tests vs training data\n","train_accuracies = []\n","test_accuracies = []\n","c_values = np.arange(0.05, 1.5, 0.05)\n","# c_values = np.arange(0.05, 1.501, 0.05)\n","for c in c_values:\n","  print(f'... iter: {c}')\n","  loop_model = LogisticRegression(solver='lbfgs', penalty='l2', C=c, max_iter=10000, random_state=2)\n","  loop_model.fit(x_train, y_train)\n","  train_accuracy = accuracy_score(y_train, loop_model.predict(x_train))\n","  test_accuracy = accuracy_score(y_test, loop_model.predict(x_test))\n","  train_accuracies.append(train_accuracy)\n","  test_accuracies.append(test_accuracy)\n",""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"DUnxWp-kVTSa","executionInfo":{"status":"ok","timestamp":1723580083156,"user_tz":240,"elapsed":1725,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}},"outputId":"f6132cc1-577e-4414-8236-082d84c506fb"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["... iter: 0.05\n","... iter: 0.1\n","... iter: 0.15000000000000002\n","... iter: 0.2\n","... iter: 0.25\n","... iter: 0.3\n","... iter: 0.35000000000000003\n","... iter: 0.4\n","... iter: 0.45\n","... iter: 0.5\n","... iter: 0.55\n","... iter: 0.6000000000000001\n","... iter: 0.6500000000000001\n","... iter: 0.7000000000000001\n","... iter: 0.7500000000000001\n","... iter: 0.8\n","... iter: 0.8500000000000001\n","... iter: 0.9000000000000001\n","... iter: 0.9500000000000001\n","... iter: 1.0\n","... iter: 1.05\n","... iter: 1.1\n","... iter: 1.1500000000000001\n","... iter: 1.2000000000000002\n","... iter: 1.2500000000000002\n","... iter: 1.3\n","... iter: 1.35\n","... iter: 1.4000000000000001\n","... iter: 1.4500000000000002\n"]}]},{"cell_type":"code","source":["# 7-1 plotting accuracy values\n","plt.figure(figsize=(10, 6))\n","plt.plot(c_values, train_accuracies, label='Training Accuracy', marker='o')\n","plt.plot(c_values, test_accuracies, label='Test Accuracy', marker='o')\n","plt.xlabel('C Value')\n","plt.ylabel('Accuracy')\n","plt.title('Effect of C Parameter on Logistic Regression Accuracy')\n","plt.legend()\n","plt.grid(True)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"KjRUNr1UW3e-","executionInfo":{"status":"ok","timestamp":1723580087910,"user_tz":240,"elapsed":448,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}},"outputId":"a9765e28-5c8c-43fb-cb00-4e346a9ab5ab"},"execution_count":41,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["best_c = c_values[np.argmax(test_accuracies)]\n","best_accuracy = max(test_accuracies)\n","print(f\"Best c-value: {best_c}\")\n","print(f\"Accuracy: {best_accuracy}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BjqBeSqSW7Y4","executionInfo":{"status":"ok","timestamp":1723580093507,"user_tz":240,"elapsed":148,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}},"outputId":"a2e4fb93-cfe3-4e13-80b4-8e60c05f499d"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["Best c-value: 0.8500000000000001\n","Accuracy: 0.8974358974358975\n"]}]},{"cell_type":"markdown","source":["# Why `C = 0.85`\n","This value is a happy medium, providing a high level of accuracy (in relation to other values), while not being to high/low, which could cause underfitting or overfitting, rendering the model ineffective with unseen/new data."],"metadata":{"id":"VDns8Vh7YV9H"}},{"cell_type":"code","source":[],"metadata":{"id":"idnbwWMoXmzP"},"execution_count":null,"outputs":[]}]}