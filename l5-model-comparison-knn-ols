{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPvPRssQGou4rZdPkWQUx3d"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Lesson 5 - KNN & OLS Regression Comparison\n","\n","Using the previous Music data set, we can initialize and compare both KNN and OLS regression.\n","\n","This will rely on `jazz` being our target, with `duration` and `loudness` being feature columns of our dataframe. For the sake of the existing data, we can also use loudness as a predictor"],"metadata":{"id":"WRMxEjJfNZD5"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score\n","import matplotlib.pyplot as plt\n","\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","# Display preferences (from example notebook)\n","%matplotlib inline\n","pd.options.display.float_format = '{:.3f}'.format\n","\n"],"metadata":{"id":"-TLLWmCnLU_N","executionInfo":{"status":"ok","timestamp":1724686482412,"user_tz":240,"elapsed":5362,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["music = pd.DataFrame()\n","\n","# Some data to play with\n","music['duration'] = [184, 134, 243, 186, 122, 197, 294, 382, 102, 264,\n","                     205, 110, 307, 110, 397, 153, 190, 192, 210, 403,\n","                     164, 198, 204, 253, 234, 190, 182, 401, 376, 102]\n","music['loudness'] = [18, 34, 43, 36, 22, 9, 29, 22, 10, 24,\n","                     20, 10, 17, 51, 7, 13, 19, 12, 21, 22,\n","                     16, 18, 4, 23, 34, 19, 14, 11, 37, 42]\n","\n","# You know whether the songs in the training data are jazz or not\n","music['jazz'] = [ 1, 0, 0, 0, 1, 1, 0, 1, 1, 0,\n","                  0, 1, 1, 0, 1, 1, 0, 1, 1, 1,\n","                  1, 1, 1, 1, 0, 0, 1, 1, 0, 0]"],"metadata":{"id":"Bo3XC-rKQ5bo","executionInfo":{"status":"ok","timestamp":1724687601875,"user_tz":240,"elapsed":159,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":["# But wait, there's more!\n","\n","The original data set is somewhat limited in scope/variability. To 'improve' it for the sake of evaluating regression models, we can inject some mocked records.\n","\n","Generally, we will consider `jazz` to be longer in duration, and `metal` to be louder."],"metadata":{"id":"xHX5l8z_Wmvh"}},{"cell_type":"code","source":["n_new_rows = 250\n","np.random.seed(42)\n","\n","# initialize jazz data\n","jazz_durations = np.random.normal(loc=300, scale=50, size=n_new_rows // 2).astype(int)  # longer duration\n","jazz_loudness = np.random.normal(loc=20, scale=5, size=n_new_rows // 2).astype(int)  # normal loudness\n","\n","# initialize metal data\n","metal_durations = np.random.normal(loc=180, scale=30, size=n_new_rows // 2).astype(int)  # normal duration\n","metal_loudness = np.random.normal(loc=40, scale=10, size=n_new_rows // 2).astype(int)  # louder loudness?\n","\n","# apply min/max caps to keep things simple\n","jazz_durations = np.clip(jazz_durations, 100, 500)\n","jazz_loudness = np.clip(jazz_loudness, 0, 50)\n","metal_durations = np.clip(metal_durations, 100, 500)\n","metal_loudness = np.clip(metal_loudness, 20, 60)\n","\n","# create dataframes to store our new data\n","jazz_data = pd.DataFrame({'duration': jazz_durations, 'loudness': jazz_loudness, 'genre': ['jazz'] * (n_new_rows // 2)})\n","metal_data = pd.DataFrame({'duration': metal_durations, 'loudness': metal_loudness, 'genre': ['metal'] * (n_new_rows // 2)})\n","new_data = pd.concat([jazz_data, metal_data], ignore_index=True)\n","\n","# append all of the new data into our existing music df\n","music_df = pd.concat([music, new_data], ignore_index=True)"],"metadata":{"id":"ZyoVtudIWmcU","executionInfo":{"status":"ok","timestamp":1724687602866,"user_tz":240,"elapsed":131,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["music_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"collapsed":true,"id":"jcoUFH2MX-mv","executionInfo":{"status":"ok","timestamp":1724687345828,"user_tz":240,"elapsed":150,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}},"outputId":"5ba0088b-ab65-4efb-caa5-37a608776d53"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   duration  loudness  jazz genre\n","0       184        18 1.000   NaN\n","1       134        34 0.000   NaN\n","2       243        43 0.000   NaN\n","3       186        36 0.000   NaN\n","4       122        22 1.000   NaN"],"text/html":["\n","  <div id=\"df-5fad2f17-1613-47df-b63b-409a8dc9359b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>duration</th>\n","      <th>loudness</th>\n","      <th>jazz</th>\n","      <th>genre</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>184</td>\n","      <td>18</td>\n","      <td>1.000</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>134</td>\n","      <td>34</td>\n","      <td>0.000</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>243</td>\n","      <td>43</td>\n","      <td>0.000</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>186</td>\n","      <td>36</td>\n","      <td>0.000</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>122</td>\n","      <td>22</td>\n","      <td>1.000</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5fad2f17-1613-47df-b63b-409a8dc9359b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5fad2f17-1613-47df-b63b-409a8dc9359b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5fad2f17-1613-47df-b63b-409a8dc9359b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-47c60cf6-728d-4537-b921-2b355bdddad3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-47c60cf6-728d-4537-b921-2b355bdddad3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-47c60cf6-728d-4537-b921-2b355bdddad3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"music_df","summary":"{\n  \"name\": \"music_df\",\n  \"rows\": 50,\n  \"fields\": [\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88,\n        \"min\": 102,\n        \"max\": 403,\n        \"num_unique_values\": 44,\n        \"samples\": [\n          137,\n          182,\n          401\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loudness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 4,\n        \"max\": 58,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          27,\n          12,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"jazz\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4982728791224398,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"genre\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"metal\",\n          \"jazz\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["# created classifier from lesson 2's KNN challenge:\n","def euclidean_distance(point1, point2):\n","    return np.sqrt(np.sum((point1 - point2) ** 2))\n","\n","def nearest_neighbor_classification(new_song, training_data):\n","    features = training_data[['duration', 'loudness']].values\n","    labels = training_data['jazz'].values\n","\n","    distances = np.array([euclidean_distance(new_song, feature) for feature in features])\n","\n","    # find the index of the closest neighbor\n","    nearest_neighbor_index = np.argmin(distances)\n","\n","    # return the label of the nearest neighbor\n","    return labels[nearest_neighbor_index]\n","\n","# new_song = np.array([200, 20])  # [duration, loudness]\n","# new_song_is_jazzy = nearest_neighbor_classification(new_song, music)\n","# print(f\"New Song Classified: {'Jazz' if new_song_is_jazzy == 1 else 'Not Jazz'}\")"],"metadata":{"id":"0Y4TOfG_RjpJ","executionInfo":{"status":"ok","timestamp":1724687604658,"user_tz":240,"elapsed":2,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["X = music_df[['loudness']]  # We use loudness as the predictor\n","y = music_df['duration']  # We predict the duration\n","\n","# split data into train and test sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n","\n","# knn regression model\n","knn_model = KNeighborsRegressor(n_neighbors=3)\n","knn_model.fit(X_train, y_train)\n","y_pred_knn = knn_model.predict(X_test)\n","\n","# ols : linear regression\n","ols_model = LinearRegression()\n","ols_model.fit(X_train, y_train)\n","y_pred_ols = ols_model.predict(X_test)\n","\n","# evaluate both models\n","mse_knn = mean_squared_error(y_test, y_pred_knn)\n","r2_knn = r2_score(y_test, y_pred_knn)\n","\n","mse_ols = mean_squared_error(y_test, y_pred_ols)\n","r2_ols = r2_score(y_test, y_pred_ols)"],"metadata":{"id":"H0DZbULvSPEO","executionInfo":{"status":"ok","timestamp":1724687606064,"user_tz":240,"elapsed":151,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["print(f\"KNN Regression - MSE: {mse_knn:.2f}, R-squared: {r2_knn:.2f}\")\n","print(f\"OLS Regression - MSE: {mse_ols:.2f}, R-squared: {r2_ols:.2f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aY1RpsTnVdXS","executionInfo":{"status":"ok","timestamp":1724687755830,"user_tz":240,"elapsed":140,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}},"outputId":"6a865d29-41a2-46ae-c279-b8cb5bcbaf99"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["KNN Regression - MSE: 4766.32, R-squared: 0.00\n","OLS Regression - MSE: 3842.49, R-squared: 0.20\n"]}]},{"cell_type":"code","source":["# knn results\n","plt.subplot(1, 2, 1)\n","plt.scatter(X_test, y_test, color='blue', label='True Values')\n","plt.scatter(X_test, y_pred_knn, color='red', label='KNN Predictions')\n","plt.title(\"KNN Regression\")\n","plt.xlabel('Loudness')\n","plt.ylabel('Duration')\n","plt.legend()\n","\n","# OLS results\n","plt.subplot(1, 2, 2)\n","plt.scatter(X_test, y_test, color='blue', label='True Values')\n","plt.plot(X_test, y_pred_ols, color='red', label='OLS Predictions')\n","plt.title(\"OLS Regression\")\n","plt.xlabel('Loudness')\n","plt.ylabel('Duration')\n","plt.legend()\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"1AfER0a_Vb35","executionInfo":{"status":"ok","timestamp":1724687610834,"user_tz":240,"elapsed":763,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}},"outputId":"2027059c-91e2-412b-8ad6-35585b5accc3"},"execution_count":29,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Review\n","\n","\n","The data is so simplified, in terms of target and feature columns, that both models perform similarly in this scenario. That said, as a purely visual reference, I prefer the KNN regression plot over the OLS regression. The indicators for `true values` and `predictions` are *good enough* to give rough understanding that matches our bias introduction.\n","\n","Having the data bias in mind, KNN regression has an easier representation of it as well. The single line provided by OLS is not detailed enough for the sample size. Should this data set be expanded to +10 features and thousands of records, it's likely that the linear representation in OLS would be preferred, as the graph would otherwise be far too condensed to provide clear visual indication."],"metadata":{"id":"FYpNxwnrZV7N"}},{"cell_type":"code","source":[],"metadata":{"id":"ISOmGYc3avL6"},"execution_count":null,"outputs":[]}]}