{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNE9nS78/HJwkNItLuIwFOi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":[],"metadata":{"id":"DrHrOCn0OOqP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"L34ZFH5VCehs"},"source":["# Solutions for checkpoint 4"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"Oq8tTngfCeht","executionInfo":{"status":"ok","timestamp":1735606755929,"user_tz":300,"elapsed":7513,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"outputs":[],"source":["import warnings\n","warnings.filterwarnings(\"ignore\")\n","\n","from tensorflow.keras.datasets import mnist\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"NI3iz1EvCehu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735606756557,"user_tz":300,"elapsed":631,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}},"outputId":"cd6b414c-891a-41c0-d010-eb0298c4d0ff"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"]}],"source":["(X_train, y_train), (X_test, y_test) = mnist.load_data()\n","\n","input_dim = 784  # 28*28\n","output_dim = nb_classes = 10\n","batch_size = 128\n","nb_epoch = 20\n","\n","X_train = X_train.reshape(60000, input_dim)\n","X_test = X_test.reshape(10000, input_dim)\n","X_train = X_train.astype('float32')\n","X_test = X_test.astype('float32')\n","X_train /= 255\n","X_test /= 255"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"BFbSIftpCehv","executionInfo":{"status":"ok","timestamp":1735606796767,"user_tz":300,"elapsed":112,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"outputs":[],"source":["Y_train = to_categorical(y_train, nb_classes)\n","Y_test = to_categorical(y_test, nb_classes)"]},{"cell_type":"markdown","metadata":{"id":"CwEcHXHtCehv"},"source":["## 1. In this task, you'll implement several ANN models with different activation functions. Specifically:"]},{"cell_type":"markdown","metadata":{"id":"Mg6bcZ0ACehw"},"source":["### Implement a three layer ANN model with 128, 64 and 10 neurons in the layers using tanh activation function for each layer."]},{"cell_type":"code","execution_count":4,"metadata":{"id":"V2x2c_ZmCehw","outputId":"2a39cb60-a811-47c2-cb30-4145dcd4e41e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735606857581,"user_tz":300,"elapsed":58136,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - accuracy: 0.6121 - loss: 1.4599\n","Epoch 2/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.8644 - loss: 0.5632\n","Epoch 3/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.8857 - loss: 0.4354\n","Epoch 4/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.8973 - loss: 0.3773\n","Epoch 5/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - accuracy: 0.9055 - loss: 0.3438\n","Epoch 6/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 5ms/step - accuracy: 0.9091 - loss: 0.3217\n","Epoch 7/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9124 - loss: 0.3088\n","Epoch 8/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.9150 - loss: 0.2966\n","Epoch 9/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.9183 - loss: 0.2851\n","Epoch 10/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 7ms/step - accuracy: 0.9228 - loss: 0.2725\n","Epoch 11/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - accuracy: 0.9265 - loss: 0.2585\n","Epoch 12/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9288 - loss: 0.2524\n","Epoch 13/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.9313 - loss: 0.2459\n","Epoch 14/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.9292 - loss: 0.2443\n","Epoch 15/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.9341 - loss: 0.2332\n","Epoch 16/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - accuracy: 0.9357 - loss: 0.2261\n","Epoch 17/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9367 - loss: 0.2226\n","Epoch 18/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.9382 - loss: 0.2144\n","Epoch 19/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.9404 - loss: 0.2113\n","Epoch 20/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.9406 - loss: 0.2077\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.history.History at 0x786c1b5010c0>"]},"metadata":{},"execution_count":4}],"source":["model = Sequential()\n","# our first dense layer\n","model.add(Dense(128, input_shape=(784,), activation=\"tanh\"))\n","# our second dense layer\n","model.add(Dense(64, activation=\"tanh\"))\n","# last layer is the output layer.\n","model.add(Dense(10, activation=\"softmax\"))\n","\n","model.compile(optimizer='sgd', loss='categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","# setting verbose=1 prints out some results after each epoch\n","model.fit(X_train, Y_train, batch_size=batch_size, epochs=20, verbose=1)"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"RShP2W79Cehx","outputId":"f7b2acc6-752a-4fe9-ca28-f96011fd03fe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735606858525,"user_tz":300,"elapsed":946,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Test score: 0.20307332277297974\n","Test accuracy: 0.940500020980835\n"]}],"source":["score = model.evaluate(X_test, Y_test, verbose=0)\n","print('Test score:', score[0])\n","print('Test accuracy:', score[1])"]},{"cell_type":"markdown","metadata":{"id":"KNi01XF5Cehx"},"source":["### Implement a three layer ANN model with 128, 64 and 10 neurons in the layers using sigmoid activation function for each layer.\n","    "]},{"cell_type":"code","execution_count":6,"metadata":{"id":"H7YsNWLQCehy","outputId":"a8837cf8-eaaa-4118-e5ab-d2aa5c87469e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735608058033,"user_tz":300,"elapsed":56475,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.1036 - loss: 2.3321\n","Epoch 2/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.3070 - loss: 2.2499\n","Epoch 3/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.3699 - loss: 2.1925\n","Epoch 4/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - accuracy: 0.5272 - loss: 2.1122\n","Epoch 5/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.5939 - loss: 2.0000\n","Epoch 6/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.6091 - loss: 1.8467\n","Epoch 7/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.6370 - loss: 1.6626\n","Epoch 8/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.6624 - loss: 1.4719\n","Epoch 9/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.6871 - loss: 1.3089\n","Epoch 10/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.7137 - loss: 1.1714\n","Epoch 11/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.7311 - loss: 1.0638\n","Epoch 12/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.7533 - loss: 0.9705\n","Epoch 13/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.7714 - loss: 0.8975\n","Epoch 14/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.7863 - loss: 0.8415\n","Epoch 15/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - accuracy: 0.7970 - loss: 0.7896\n","Epoch 16/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.8069 - loss: 0.7449\n","Epoch 17/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.8134 - loss: 0.7129\n","Epoch 18/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - accuracy: 0.8244 - loss: 0.6760\n","Epoch 19/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - accuracy: 0.8329 - loss: 0.6401\n","Epoch 20/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.8395 - loss: 0.6138\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.history.History at 0x786c17d90250>"]},"metadata":{},"execution_count":6}],"source":["model = Sequential()\n","# our first dense layer\n","model.add(Dense(128, input_shape=(784,), activation=\"sigmoid\"))\n","# our second dense layer\n","model.add(Dense(64, activation=\"sigmoid\"))\n","# last layer is the output layer.\n","model.add(Dense(10, activation=\"softmax\"))\n","\n","model.compile(optimizer='sgd', loss='categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","# setting verbose=1 prints out some results after each epoch\n","model.fit(X_train, Y_train, batch_size=batch_size, epochs=20, verbose=1)"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"8NvJ1F4zCehy","outputId":"ede5e537-e779-48d7-9c71-0bcc2c36e139","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735608058938,"user_tz":300,"elapsed":910,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Test score: 0.5857464075088501\n","Test accuracy: 0.8463000059127808\n"]}],"source":["score = model.evaluate(X_test, Y_test, verbose=0)\n","print('Test score:', score[0])\n","print('Test accuracy:', score[1])"]},{"cell_type":"markdown","metadata":{"id":"PXlx7BUtCehz"},"source":["### Implement a three layer ANN model with 128, 64 and 10 neurons in the layers using ReLU activation function for each layer."]},{"cell_type":"code","execution_count":8,"metadata":{"id":"Lp77QfbKCehz","outputId":"d3f8e6c4-fe7c-4652-ace5-29a9c9137c62","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735608109966,"user_tz":300,"elapsed":51030,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - accuracy: 0.4757 - loss: 1.8015\n","Epoch 2/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 7ms/step - accuracy: 0.8565 - loss: 0.5700\n","Epoch 3/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.8894 - loss: 0.4080\n","Epoch 4/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.9010 - loss: 0.3494\n","Epoch 5/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9108 - loss: 0.3147\n","Epoch 6/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9133 - loss: 0.3014\n","Epoch 7/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 6ms/step - accuracy: 0.9214 - loss: 0.2767\n","Epoch 8/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.9268 - loss: 0.2575\n","Epoch 9/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9287 - loss: 0.2508\n","Epoch 10/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9338 - loss: 0.2358\n","Epoch 11/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.9355 - loss: 0.2291\n","Epoch 12/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9394 - loss: 0.2176\n","Epoch 13/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.9406 - loss: 0.2125\n","Epoch 14/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - accuracy: 0.9413 - loss: 0.2083\n","Epoch 15/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.9441 - loss: 0.1943\n","Epoch 16/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9471 - loss: 0.1887\n","Epoch 17/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9477 - loss: 0.1831\n","Epoch 18/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 6ms/step - accuracy: 0.9515 - loss: 0.1708\n","Epoch 19/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9525 - loss: 0.1687\n","Epoch 20/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9544 - loss: 0.1604\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.history.History at 0x786c0c1d5570>"]},"metadata":{},"execution_count":8}],"source":["model = Sequential()\n","# our first dense layer\n","model.add(Dense(128, input_shape=(784,), activation=\"relu\"))\n","# our second dense layer\n","model.add(Dense(64, activation=\"relu\"))\n","# last layer is the output layer.\n","model.add(Dense(10, activation=\"softmax\"))\n","\n","model.compile(optimizer='sgd', loss='categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","# setting verbose=1 prints out some results after each epoch\n","model.fit(X_train, Y_train, batch_size=batch_size, epochs=20, verbose=1)"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"A3CHk1JACehz","outputId":"9019abb8-a73b-4dad-975a-3d0e6e6751d8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735608110841,"user_tz":300,"elapsed":881,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Test score: 0.16672903299331665\n","Test accuracy: 0.953000009059906\n"]}],"source":["score = model.evaluate(X_test, Y_test, verbose=0)\n","print('Test score:', score[0])\n","print('Test accuracy:', score[1])"]},{"cell_type":"markdown","metadata":{"id":"z0MM4H43Cehz"},"source":["### Compare the result of each model with each other. Which activation function did perform better?"]},{"cell_type":"markdown","metadata":{"id":"DHWDtuHOCeh0"},"source":["The highest accuracies in both the training and the test sets are achieved using the ReLU function."]},{"cell_type":"markdown","metadata":{"id":"yDVUmCPaCeh0"},"source":["## 2. In this task, you'll implement the ANN models specified below with the hinge loss function as their loss functions:"]},{"cell_type":"markdown","metadata":{"id":"luEfO42gCeh0"},"source":["### Implement a three layer ANN model with 128, 64 and 10 neurons in the layers using tanh activation function for each layer.\n","   "]},{"cell_type":"code","execution_count":10,"metadata":{"id":"9N42hwSiCeh0","outputId":"355383b1-aa7c-4983-c88a-e9c9e99ea269","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735608165678,"user_tz":300,"elapsed":54839,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.2718 - loss: 1.0312\n","Epoch 2/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - accuracy: 0.6602 - loss: 0.8376\n","Epoch 3/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 7ms/step - accuracy: 0.7609 - loss: 0.6327\n","Epoch 4/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.8186 - loss: 0.5010\n","Epoch 5/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.8522 - loss: 0.4196\n","Epoch 6/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.8682 - loss: 0.3642\n","Epoch 7/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.8789 - loss: 0.3260\n","Epoch 8/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.8825 - loss: 0.3062\n","Epoch 9/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 7ms/step - accuracy: 0.8896 - loss: 0.2848\n","Epoch 10/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.8902 - loss: 0.2733\n","Epoch 11/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.8965 - loss: 0.2571\n","Epoch 12/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.9018 - loss: 0.2440\n","Epoch 13/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.9023 - loss: 0.2382\n","Epoch 14/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.9068 - loss: 0.2272\n","Epoch 15/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.9054 - loss: 0.2260\n","Epoch 16/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 5ms/step - accuracy: 0.9092 - loss: 0.2164\n","Epoch 17/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9096 - loss: 0.2148\n","Epoch 18/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.9142 - loss: 0.2058\n","Epoch 19/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 7ms/step - accuracy: 0.9147 - loss: 0.2041\n","Epoch 20/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - accuracy: 0.9175 - loss: 0.1976\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.history.History at 0x786c0c1317e0>"]},"metadata":{},"execution_count":10}],"source":["model = Sequential()\n","# our first dense layer\n","model.add(Dense(128, input_shape=(784,), activation=\"tanh\"))\n","# our second dense layer\n","model.add(Dense(64, activation=\"tanh\"))\n","# last layer is the output layer.\n","model.add(Dense(10, activation=\"softmax\"))\n","\n","model.compile(optimizer='sgd', loss='categorical_hinge',\n","              metrics=['accuracy'])\n","\n","# setting verbose=1 prints out some results after each epoch\n","model.fit(X_train, Y_train, batch_size=batch_size, epochs=20, verbose=1)"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"Ck57Fu_LCeh1","outputId":"de46b1e0-bdee-4004-9fd1-29d236648667","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735608166466,"user_tz":300,"elapsed":790,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Test score: 0.19013939797878265\n","Test accuracy: 0.9193000197410583\n"]}],"source":["score = model.evaluate(X_test, Y_test, verbose=0)\n","print('Test score:', score[0])\n","print('Test accuracy:', score[1])"]},{"cell_type":"markdown","metadata":{"id":"crqVDft_Ceh1"},"source":["### Implement a three layer ANN model with 128, 64 and 10 neurons in the layers using sigmoid activation function for each layer.\n","    "]},{"cell_type":"code","execution_count":12,"metadata":{"id":"6Fbf-1wECeh1","outputId":"8d19678e-06cf-4479-b0ba-7cd39e6c9369","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735608218345,"user_tz":300,"elapsed":51881,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.1473 - loss: 1.0617\n","Epoch 2/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.1701 - loss: 1.0066\n","Epoch 3/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - accuracy: 0.2107 - loss: 1.0028\n","Epoch 4/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - accuracy: 0.2657 - loss: 1.0022\n","Epoch 5/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.3153 - loss: 1.0017\n","Epoch 6/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.3604 - loss: 1.0012\n","Epoch 7/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.3938 - loss: 1.0008\n","Epoch 8/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.4276 - loss: 1.0004\n","Epoch 9/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - accuracy: 0.4618 - loss: 1.0000\n","Epoch 10/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.4892 - loss: 0.9997\n","Epoch 11/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.5116 - loss: 0.9993\n","Epoch 12/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.5308 - loss: 0.9990\n","Epoch 13/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.5568 - loss: 0.9987\n","Epoch 14/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.5754 - loss: 0.9984\n","Epoch 15/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - accuracy: 0.5900 - loss: 0.9980\n","Epoch 16/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.6024 - loss: 0.9978\n","Epoch 17/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.6161 - loss: 0.9974\n","Epoch 18/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.6266 - loss: 0.9972\n","Epoch 19/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.6348 - loss: 0.9968\n","Epoch 20/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.6480 - loss: 0.9965\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.history.History at 0x786c04fbf610>"]},"metadata":{},"execution_count":12}],"source":["model = Sequential()\n","# our first dense layer\n","model.add(Dense(128, input_shape=(784,), activation=\"sigmoid\"))\n","# our second dense layer\n","model.add(Dense(64, activation=\"sigmoid\"))\n","# last layer is the output layer.\n","model.add(Dense(10, activation=\"softmax\"))\n","\n","model.compile(optimizer='sgd', loss='categorical_hinge',\n","              metrics=['accuracy'])\n","\n","# setting verbose=1 prints out some results after each epoch\n","model.fit(X_train, Y_train, batch_size=batch_size, epochs=20, verbose=1)"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"u2QzxnjYCeh1","outputId":"dc913778-fe72-40f0-a243-9d2459def241","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735608219267,"user_tz":300,"elapsed":926,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Test score: 0.9962996244430542\n","Test accuracy: 0.6578999757766724\n"]}],"source":["score = model.evaluate(X_test, Y_test, verbose=0)\n","print('Test score:', score[0])\n","print('Test accuracy:', score[1])"]},{"cell_type":"markdown","metadata":{"id":"0r4ho6vJCeh2"},"source":["### Implement a three layer ANN model with 128, 64 and 10 neurons in the layers using ReLU activation function for each layer.\n","   "]},{"cell_type":"code","execution_count":14,"metadata":{"id":"SsWgAW0_Ceh2","outputId":"a3081fcf-0f71-4b58-c7cc-c2f8a193c708","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735608273962,"user_tz":300,"elapsed":54697,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.1734 - loss: 1.0242\n","Epoch 2/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.5022 - loss: 0.9907\n","Epoch 3/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.6035 - loss: 0.9278\n","Epoch 4/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.6722 - loss: 0.7890\n","Epoch 5/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.7868 - loss: 0.5850\n","Epoch 6/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - accuracy: 0.8590 - loss: 0.4240\n","Epoch 7/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.8784 - loss: 0.3361\n","Epoch 8/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - accuracy: 0.8877 - loss: 0.2907\n","Epoch 9/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.8962 - loss: 0.2620\n","Epoch 10/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9012 - loss: 0.2423\n","Epoch 11/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.9044 - loss: 0.2321\n","Epoch 12/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9074 - loss: 0.2192\n","Epoch 13/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9108 - loss: 0.2099\n","Epoch 14/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 6ms/step - accuracy: 0.9113 - loss: 0.2049\n","Epoch 15/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - accuracy: 0.9154 - loss: 0.1974\n","Epoch 16/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9186 - loss: 0.1903\n","Epoch 17/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9197 - loss: 0.1858\n","Epoch 18/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 4ms/step - accuracy: 0.9205 - loss: 0.1821\n","Epoch 19/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 7ms/step - accuracy: 0.9216 - loss: 0.1802\n","Epoch 20/20\n","\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.9231 - loss: 0.1759\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.history.History at 0x786c045171c0>"]},"metadata":{},"execution_count":14}],"source":["model = Sequential()\n","# our first dense layer\n","model.add(Dense(128, input_shape=(784,), activation=\"relu\"))\n","# our second dense layer\n","model.add(Dense(64, activation=\"relu\"))\n","# last layer is the output layer.\n","model.add(Dense(10, activation=\"softmax\"))\n","\n","model.compile(optimizer='sgd', loss='categorical_hinge',\n","              metrics=['accuracy'])\n","\n","# setting verbose=1 prints out some results after each epoch\n","model.fit(X_train, Y_train, batch_size=batch_size, epochs=20, verbose=1)"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"zVzIlUEECeh2","outputId":"a1144e1c-e5a9-4962-d2e4-0cc7fb6915d6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735608274797,"user_tz":300,"elapsed":942,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Test score: 0.1688797026872635\n","Test accuracy: 0.9239000082015991\n"]}],"source":["score = model.evaluate(X_test, Y_test, verbose=0)\n","print('Test score:', score[0])\n","print('Test accuracy:', score[1])"]},{"cell_type":"markdown","metadata":{"id":"6GSzhMNwCeh2"},"source":["### Compare the result of each model with the result of the same model from the previous task. Which loss function did perform better?"]},{"cell_type":"markdown","metadata":{"id":"urvV9JR2Ceh3"},"source":["The highest accuracies in both the training and the test sets are achieved using the ReLU function. Moreover, all accuracies for all the models are lower when we train our models using hinge loss in comparison to using cross entropy loss."]},{"cell_type":"code","source":[],"metadata":{"id":"pkg2SZKzTHAk","executionInfo":{"status":"ok","timestamp":1735608274797,"user_tz":300,"elapsed":3,"user":{"displayName":"Steve Salmons","userId":"09210254671724444253"}}},"execution_count":15,"outputs":[]}]}